# from features.csv
# GOV/AK WALKER&MALLOT BORN IN FAIRBANKS,yx4f2zK67q0,"23,136,186,224,306,366,384,474,585,642,686",I'm Bill Walker candidate for governor I was born in Fairbanks my dad fought with the Alaskan Scouts my parents fought for Statehood I'm Donna Walker our children and grandchildren hope to always call Alaska hall now it's my turn to fight for Alaska deficit spending industry closures and high energy costs are hurting alaskans we need a dynamic leader like Bill Walker as your Governor we will energize and build a strong Alaska paid for by Walker for governor 731 and Street Anchorage Alaska,walker governor alaska first it≈•'s time paid for by walker for governor 731 n st anchorage ak 99501,3025.5616880659713,806.2674565784571,0.00016238138509039687,0.00035515752426043025,5456.336595107641,1487.0869498008642,4.466858886520021,1.8797915644074952,33.1875808073663,25.755714586380957,1.6007414622157402e-06,3.9868786834827377e-07,-3.853306392066977e-07,-1.4298579631412543e-07,-2.579836675442537e-08,1.545327333857113e-07,-4.400920812585519e-08,-1.8952160751551598e-07,-7.12284828217498e-08,-5.981087862368733e-08,-3.0543779503327615e-08,-5.714239891379797e-08,-6.818930307508998e-08,-1.3992033416733858e-09,1.1077559846245683e-08,-2.0534100479160304e-08,8.609798827931462e-09,1.0796312117649966e-08,-1.4793409405940381e-08,3.9861720692480364e-08,3.826731614817701e-06,3.1619095288702065e-06,1.360960060549648e-06,1.7641395509266895e-06,1.9057768749600045e-06,1.37596163040052e-06,1.2667925993508502e-06,1.1359612761661675e-06,1.2964368244265433e-06,1.1525778722022638e-06,8.384111688042156e-07,1.145133933524612e-06,1.0017632016129921e-06,8.739913047154146e-07,7.700001107346498e-07,8.272670055806101e-07,8.476257474868923e-07,6.598391366703124e-07,6.170822920107073e-07,8.46894074272775e-07,8.245180702870866e-07,7.349802088935876e-06,-11.354489074783746,-9.605548090626835,-9.474534419847233,-9.52667978488054,-9.628161735909258,-9.663592378966861,-10.679210143091572,-11.613613798404359,2.769083797516613,1.8557532440149132,2.2028726177723823,2.683293339708672,2.487532045154604,2.36950632936711,2.5940002010503997,2.343460979263798,1.55951247374262,1.3842155607799418,1.360141699327067,1.400447383549313,1.3781069349981634,1.3619472086808349,1.2663211583281613,1.1998965598526095,1.2054826854693697,0.8337489329108877,0.8017452636895689,0.7860894800203466,0.692208235816003,0.5571412611600363,0.6937923822096977,0.5255129909763634,0.6269400805645264,0.8007765889583146,0.7163201923934378,0.6275544266600097,0.6608010221665724,0.6969500973802772,0.6524171918502704,0.7147002782714225,2.4363380902606657,1.9082376068848828,2.595547062787576,3.724746929463639,4.372169169788622,4.815316222290014,6.073900025602963,4.877083621530354,0.19488258684787163,0.13359184800153256,0.14980073769377183,0.15597719854093248,0.14299298639188632,0.11786441238774309,0.14441974980838318,0.10385449807376583,0.6097383819023526,0.4268060572785022,0.7478279440793114,1.2880061902759214,1.8582633200031786,2.0485061099285846,2.901581002467256,2.249430695770219,3.075370972936538e-07,1.3869839703651604e-07,1.7625480669731333e-07,1.533932042659453e-07,1.3515850938526107e-07,9.972444245795414e-08,9.322887270753921e-08,1.1666334720998769e-07,9.974223437760878e-08,5.748195956783233e-08,9.104643451359732e-08,9.15790885219375e-08,6.950656295444052e-08,6.448953487774429e-08,6.436611643805863e-08,6.073362452036047e-08,4.7263172274229504e-08,4.96698603611452e-08,6.245539293396511e-08,5.657281656486127e-08,7.163473567810371e-07,2.440582300025351e-07,1.0832307130643668e-07,1.3786224950339255e-07,1.2743116066174462e-07,1.0989750879895696e-07,6.938984210215205e-08,6.921985880147297e-08,8.730908369257158e-08,7.210978400304396e-08,3.8932707006342025e-08,6.621318975732503e-08,7.490560994839134e-08,4.465916001074109e-08,3.841798514762438e-08,4.792694331375805e-08,3.7018341467765045e-08,2.98393793874843e-08,3.352531568547695e-08,3.8767451768434286e-08,3.426376299606263e-08,5.674135537729349e-07,1.525256494447068e-22,2.3773264127799555e-07,2.556092602531441e-07,1.7756232377600907e-07,1.5182472600288739e-07,7.691578404502268e-08,1.7659541891937304e-08,3.5263693213413855e-22,2.2611657871519604e-07,3.47430824707256e-07,2.0550363763901067e-07,1.5676736604418812e-07,6.544626244292277e-08,8.494892329925738e-09,3.462016608243653e-07,1.539550387275883e-07,1.9745193739628584e-07,2.288036338140795e-07,1.3213700882512154e-07,1.450342486287293e-07,1.1961662598390658e-07,1.333203383182758e-07,1.3345136973247376e-07,8.77201489787642e-08,1.363243788252231e-07,9.318532876397117e-08,8.645215023729126e-08,6.293633660852341e-08,7.918466780201852e-08,7.890266098544124e-08,5.892565712017659e-08,5.8441922516141865e-08,6.94572949552847e-08,7.244782063700034e-08,8.081408984085284e-07,1.7493633698097072e-07,8.167791616756863e-08,1.314693502763201e-07,1.2605069582128497e-07,5.730843255254534e-08,7.725152891466236e-08,4.855232319558205e-08,8.719161270420529e-08,7.617075914644834e-08,4.731512380805318e-08,6.187102652864637e-08,6.006989622358213e-08,3.8573127048985624e-08,3.6333436017649306e-08,2.6308007466443225e-08,1.9436481614674754e-08,3.087040302585747e-08,1.717251492915029e-08,2.9104599928994594e-08,3.2205932546480513e-08,4.030902467002277e-07,3.104335471181277e-07,8.97444915560962e-08,8.36065315344064e-08,1.5484134531033367e-07,1.7826305096444215e-07,1.581519496959115e-07,1.1898945985041272e-07,3.3616753763841237e-07,1.439386670973665e-07,6.015021150423297e-08,1.5855564419404618e-07,2.0224722876420626e-07,1.4946489067667953e-07,1.0109257467992083e-07,-14.073561025562803,-11.746983997911718,-11.099068516693366,-11.088723098105694,-11.150033606739703,-11.288944207559714,-12.460857067457285,-13.899877238441311,-12.664784215070622,-11.245700199579597,-10.862743029515345,-10.028688651462609,-10.207686864861403,-10.722728268527463,-12.041342396160884,-13.268201410184334,-13.234450587817365,-11.66816057581389,-10.890900905383052,-10.235000957418718,-10.214303337717594,-10.789131392518936,-11.743390199090166,-12.843697566805558,-13.163309720013809,-11.77486909369832,-11.111591840352046,-10.237938021895484,-10.262900816847944,-10.923321619212919,-12.051211561595421,-13.173132107119887,-13.324115938328625,-11.720730064837205,-11.378313390122342,-10.368844787657572,-10.43018716340414,-11.04497384846222,-12.057554822078146,-13.20403169698718,-13.758794563476982,-12.410154832068184,-11.768359283967769,-10.821542533142921,-10.719500351323008,-11.417814601445027,-12.42854661384122,-13.611821380664095,-14.037709587754986,-13.022016946111034,-12.419870524287354,-11.511985221266087,-11.219844281258302,-11.840324249119057,-12.932952552456854,-14.058667758641372,4.131457878756116,2.6786933031766935,2.3125972882956543,2.836290457825948,2.6906183641903443,2.550483015983909,3.2651256758147778,3.378727603810754,2.220275875402063,1.5240534809629054,1.8916376882504675,1.6228452084991503,1.7318522900129327,1.804336978100018,2.489045738191626,2.2252646813131562,2.6886240808790927,1.8937553014992687,1.7079986741832496,1.633321281336837,1.6404451567790286,1.8435219180626863,2.132718823136397,2.0276652758281113,2.422513667630666,1.7574247731864414,1.8183334611834034,1.666227757387654,1.6483812843026477,1.8815073084800584,2.335307393207602,2.1551519898063773,2.3525995931808694,1.6398594760079366,1.9786096386965522,1.7049342168112513,1.6661912869376554,1.9604348077382152,2.203210462448503,2.1391455499497916,2.197117860816281,1.7908109570234014,1.9914893089232226,1.7502781744317168,1.6484896729276457,1.9343873693203388,2.1665916564132353,2.2022276631332645,1.9865715407427729,1.79412880652389,1.9879773110621901,1.8170119260525581,1.7515956403687785,1.9109385530944127,2.2646409739779454,2.183047866114139,0.022689889809147275,0.03288988522593924,0.03464256597128121,0.030569126627470328,0.032589015900621084,0.033471168885379515,0.02717705250812758,0.028537894036676736,0.7400312140077951,0.853314233056373,0.8027787431094303,0.8478169245770992,0.8348679012499539,0.8140014992448966,0.6795923279664942,0.7497482155680757,0.6544377156280253,0.8051261959066425,0.826348038054848,0.8502076794467325,0.8446484776167974,0.8107658726616912,0.7515895998929186,0.7820982118214991,0.7109379999978348,0.8280414046717339,0.8153519793055142,0.843620095371203,0.8470962363366402,0.8049641311346387,0.7142644273557476,0.761432235985468,0.7236587000799236,0.8472240774555445,0.7863608844637001,0.8362621881965397,0.8421837753340117,0.7909068501083039,0.7419776030696763,0.7634574395464531,0.7568102255492326,0.8235866967035116,0.7856478977072843,0.8288617696874877,0.8448477748938714,0.795618824893319,0.7499578518103933,0.7516874409507196,0.7884480886054575,0.819797412493076,0.7829037456739373,0.8159621035761988,0.8271011732881839,0.7993169338684479,0.7301241948087711,0.7557739858742993,3.7892666329467994,2.347509162093614,2.374584497445771,4.214492966438556,3.0249267728526665,3.2502020718476627,5.681764683711105,4.238154515712616,3.478392973906627,2.4712475982045663,2.7877926324513873,3.4475145254622204,2.898430857259647,3.473612580327376,5.251905812701195,4.7187708731162585,3.269387931578636,2.9332071591919022,2.7510654565316752,2.9797410637551143,3.2527544270566966,4.352471500367442,4.570592420326929,4.110436873026593,6.053637921235474,2.793136920241512,3.7415980620680838,2.8357217617983133,2.9846434231982655,4.70244377086568,5.7562521958088935,4.4956031025593575,8.266144933861693,5.384303463955311,6.118709377268174,3.3433659400384204,3.7526021226383808,4.885591798703099,5.701415450753379,5.367661720505865,3.703525817656762,4.007354737797918,4.1256329646614285,4.290117163419192,3.382913003846919,5.182439035224587,5.920668210786583,5.681661468511359,4.834781608310847,3.9395428616058425,4.969740881907152,4.8474678007537335,3.884360560867144,5.946765614954481,6.90174583863319,6.033251908820421

import ffmpeg
import pandas as pd
import os, sys
from tqdm import tqdm

def read_wmp():
    # open file
    # wmp = pd.read_csv(join(WMP_DIR, 'wmp_final.csv'), index_col='creative')
    dta_path = '/home/j.soyeon/vit/camp/campvideo-data/data/wmp/wmp-senate-2012-v1.1.dta'
    dta_path2 = '/home/j.soyeon/vit/camp/campvideo-data/data/wmp/wmp-senate-2014-v1.0.dta'
    print(f'Reading stata file {dta_path}')
    df1 = pd.read_stata(dta_path, index_col='creative')
    print(f'Reading stata file {dta_path2}')
    df2 = pd.read_stata(dta_path2, index_col='creative')
    df = pd.concat([df1, df2], axis=0, ignore_index=False)

    df = df[['cand_id', 'category', 'o_picture', 'f_picture', 'vid', 'vidfile']]

    matches = pd.read_csv('/home/j.soyeon/vit/camp/campvideo-data/data/matches/matches.csv')
    # Step 1: Filter matches where 'uid' is not 'NoMatch'
    filtered_matches = matches[~matches['uid'].isin(['NoMatch', 'NoChannel'])]

    # Step 2: Get a list of 'CREATIVE' values from filtered matches
    creative_list = filtered_matches['creative'].unique()

    # Step 3: Filter df to include only rows where 'CREATIVE' is in the creative_list
    wmp = df[df.index.isin(creative_list)] # index_col = 'creative' so now creative col is named index
    wmp = wmp.sort_index()
    filtered_matches = filtered_matches.set_index('creative')

    # print(wmp.head(5), filtered_matches.head(5))
    
    wmp = wmp.join(filtered_matches.sort_index()[['uid']], how="left")
    # sort index and return
    return wmp.drop_duplicates().sort_index()

def extract_frames_ffmpeg():
    def find_videos():
        video_path = '/home/j.soyeon/vit/camp/campvideo-data/data/videos'
        wmp = read_wmp()
        features = pd.read_csv('/home/j.soyeon/vit/camp/campvideo-data/data/features/features.csv')[['uid', 'keyframes']].set_index('uid')
        for uid in tqdm(wmp['uid'], total=len(wmp)):
            video_name = os.path.join(video_path, uid) + '.mp4'
            if os.path.exists(video_name):
                keyframes = features.loc[uid]['keyframes']
                keyframes = [int(x) for x in keyframes.split(',')]
                output_path = f'./campvideo-data/data/extracted_frames/{uid}'
                os.makedirs(output_path, exist_ok=True)
                for index in keyframes:
                    print(f'extracting frame {index} from {uid}...')
                    output_filename = f"{output_path}/frame_{index}.jpg"
                    try:
                        (
                            ffmpeg
                            .input(video_name, ss=(index/24))  # Assuming 30 fps; adjust the denominator as per the actual frame rate
                            .output(output_filename, vframes=1)
                            .run(capture_stdout=True, capture_stderr=True)
                        )
                    except ffmpeg.Error as e:
                        print(e.stderr.decode(), file = sys.stderr)

    find_videos()
        
if __name__ == '__main__':
    # video_path = './campvideo-data/data/videos/6sRIJWgSlSA.mp4'
    # frame_indices = [56,94,179,232,248,312,343,389,431,462,534,605,642,702,733,752,847]  # Example frame indices
    # output_folder = './campvideo-data/data/extracted_frames/test'
    extract_frames_ffmpeg()

# getting input video fps(frame per second)
# ffmpeg -i ./campvideo-data/data/videos/yx4f2zK67q0.mp4 2>&1 | grep -oP "Stream.*?(\d+ fps)"

